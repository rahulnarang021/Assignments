{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww27000\viewh19300\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs36 \cf0 Overall Application uses clean architecture principle inspired from MVP to separate each and every component\'92s responsibility to make them testable and scalable\
\pard\tx890\pardeftab890\pardirnatural\partightenfactor0
\cf0 \
AppSupport: iOS 12 and above\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 AppKernel:\
   \ul ApplicationComposer\ulnone : This is the main brain of the application which is managing metric calculation instances and composing different root modules of the application\
\
Core:\
	\ul MetricType\ulnone  Enum which contains different metrics that application is listening to.\
	\ul Storage\ulnone \
		LocalStorage: A protocol to save and get, encodable and decodable, data from Key-Value storage.\
     		UserdefaultsLocalStorage: This is the implementation of LocalStorage which is using Userdefaults to save and get data (Can later by replaced by any database without any dependencies)\
	\ul Client\ulnone \
		\ul Metric\ulnone :\
			MetricConfigurationClient: Its a protocol which is used to save and get data related to metric configurations such as alert statuses(error and recovery alert) and threshold\
			LocalMetricConfigurationClient: Its a implementation of above client which is using LocalStorage to save and get the values\
		\ul Alert\ulnone :\
			AlertStorage: Its a storage for different error alerts are fired by the system when any metric crosses the configured threshold point\
	\ul AlertService\ulnone :\
           MetricAlertService: Its a class which calculate all metrices to fire the error and recovery alert actions of different metrics\
	\ul PerformanceMetric\ulnone :\
		MetricCalculator: It\'92s a class that contains logic of fetching different metrics from the device.\
	\ul TimerService\ulnone : It contains the timer which keeps on checking periodically for different configurations and metrics and fire action that needs to be handled each time.\
\
 Modules/Screens: \
	\ul PeformanceConfigurationModule\ulnone : The module where user can change different alert configurations.\
		\ul PerformanceViewComposer\ulnone : It contains composition Logic to configure this screen\
		\ul ViewModel\ulnone \
			MetricViewModel: It contains the data that is to be displayed in this screen\
		\ul Presenter\ulnone \
			PerformanceViewPresenter: It\'92s the class to which PerformanceViewController interacts for any action. It contains instances of MetricClient to save and get user\'92s alert configuration\
		\ul Cell\ulnone :\
			PerformanceCellController: It\'92s the main controller that interacts which cell and pass messages to presenter for each individual metric type\
			PerformanceMetricCell: It\'92s a cell UI for each metric that is displayed in viewController.\
		\ul View\ulnone \
			PerformanceViewController: The UIViewController that is responsible to show the layout of this module/screen\
\
	\ul AlertModule\ulnone : The module which contains a list of error alerts which are fired\
		AlertViewComposer: It\'92s the composer which is responsible of composing this module\
		AlertViewController: The UIViewController that is responsible to show the layout of this module/screen\
		AlertViewCell: It\'92s the cell which displays the different alerts which are already fired}